一、依赖注入：butterknife框架：绑定界面的view及监听事件
onBind
onClick
Androidstudio 有相应插件，可以一键生成对应的layout的view以及监听

二、图片框架：glide（还有univerImageLoader，fresco，piccso）
从文件，资源，网络中获取图片，并缓存
Glide.with(this).load("http://goo.gl/gEgYUd").into(imageView);

三、网络框架：retrofit（对应的还有volley）
是封装在okhttpclient基础上的，所以使用很简洁
entity：以res为结尾的是response，以req结尾的是request
item：对应于List

后台API：[{},...]=[{},{},{}] 相当于List<Item>
{} 相当于一个entity完成

1、定义一个接口
2、在接口定义api相应的用注解表示的方法
3、在Model层里实现具体的网络请求

步骤：在四个api里写相应的请求
用了RxJava的请求方式
四种请求方法：
GET：无body
POST：Body
PUT：Body
DELETE

Token：相当于用户的凭证，注册，在没有本地缓存的情况下第一登录，需要从后台获取，然后缓存起来


MVP架构
Modle：去数据库或网络获取数据，根据presenter的命令完成具体的逻辑操作
Presenter：接收View(Activity，Fragment等)的命令，然后实现具体的业务逻辑，再通过Model去拿数据，最后通过View定义的接口，通知界面的更新。
View：负责界面更新及交互，包括XML定义的，以及Activity等。



登录逻辑：
welcome界面：启动动画，先判断本地是否有token，如果有，直接跳到MAinActivity；如果没有token，则跳到Login界面。
Login界面：点击登录，去后台判断，若符合则跳到MAinActivity，再保存token
register界面：注册，保存token


Base开始的，负责一些通用的处理
BaseActivity：负责ToolBar的显示，封装了启动另一个activity的操作，
BaseFragment
BaseLazyFragment：懒加载，数据不会一下全部加载，用ViewPager+fragment，可以用这个fragment，延迟加载。
BaseSwipeActivity:继承BaseActivity，加了一个功能：左右滑动的来替换返回按钮退出
BasisAdapter：ListView的数据适配
